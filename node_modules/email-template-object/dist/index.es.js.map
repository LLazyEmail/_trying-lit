{"version":3,"file":"index.es.js","sources":["../node_modules/easy-factory/lib/factory.js","../src/easyFactory.js","../src/factoryTwo.js","../src/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Factory class that returns a reformatter instance based on some context.\n *\n * @class Factory\n */\nclass Factory {\n  /**\n   * Instantiate the object.\n   *\n   * Any additional arguments are passed to the object constructor.\n   *\n   * @param {*} context\n   *   The information we base on to decide which object to return.\n   *\n   * @return {*}\n   *   The instantiated object.\n   */\n  static create(context) {\n    // Pass any extra arguments to the constructors.\n    const constructorArgs = Array.prototype.slice.call(arguments); // eslint-disable-line prefer-rest-params\n    constructorArgs.shift();\n    // Defer the actual class name to the final implementations.\n    const Implementor = this.getClass(context);\n    // This is the ES5 friendly version of new Implementor(...constructorArgs)\n    return new (Function.prototype.bind.apply(Implementor, [null].concat(constructorArgs))); // eslint-disable-line new-parens\n  }\n\n  /**\n   * Decide which class to instantiate based on the context.\n   *\n   * @param {*} context\n   *   The information we base on to decide which object to return.\n   *\n   * @throws Error\n   *   If no class could be found.\n   *\n   * @return {function}\n   *   The class to instantiate.\n   */\n  static getClass(context) {\n    throw new Error(`This method should be implemented in the factory subclasses. Context: ${context}`);\n  }\n}\n\nmodule.exports = Factory;\n","'use strict';\n \nimport Factory from 'easy-factory';\n\n \n/* eslint-disable global-require */\n \n/**\n * @classdesc\n *   A factory class to get a fruit.\n *\n * @class FruitFactory\n */\nclass FruitFactory extends Factory {\n  /**\n   * Decide which fruit to instantiate based on the size and sugar.\n   *\n   * @param {object} context \n   *   Contains the keys: 'size' and 'sugar'.\n   *\n   * @throws Error\n   *   If no fruit could be found.\n   *\n   * @return {function} \n   *   The fruit to instantiate.\n   */\n  static getClass(context) {\n\n    if (typeof context.size === 'undefined' || typeof context.sugar === 'undefined') {\n      throw new Error('Unable to find fruit.');\n    }\n\n    if (context.size >= 5) {\n      // This is a big fruit.\n      return context.sugar >= 5 ? './mango' : './pumpkin';\n    }\n\n    return context.sugar >= 5 ? './grape' : './almond';\n  }\n}\n \nexport default FruitFactory;\n\n\n// https://github.com/e0ipso/easy-factory/blob/master/test/implementations/grape.js","class displayFactoryTwo {\n\n    error = false;\n    partial = '';\n\n    isError = () => {\n        return this.error;\n    }\n    setPartial = (string) => {\n      this.partial = string;\n    }\n\n    getPartial = () => {\n      return this.partial;\n    }\n\n    display = () => {\n      this.getPartial();\n    }\n\n    create = (settings) => {\n        \n        // if (!settings)\n        // add error checking here.. probably few versions to test\n\n        const { component, params, subcomponents } = settings;\n\n        // cover a case when subcomponents didnt passed and we apply { }\n\n\n        let partial;\n\n        \n        \n\n\n          //here i want to apply a check and see if everything is fine, if not we generate error = true \n          try {\n            partial = component(params, subcomponents);\n\n            return partial;\n            // this.setPartial(partial);\n            // console.log(partial);\n\n          } catch (err) {\n            // statements to handle any exceptions\n            console.log(err);\n            // this.error = true;\n          }\n\n    }\n\n\n    \n}\n\nexport default displayFactoryTwo;\n\n\n//     return {\n//       error: false, \n//       params: params,\n//       subcomponents: subcomponents,  \n      \n//       display: () => { \n  \n//           //here i want to apply a check and see if everything is fine, if not we generate error = true \n//           try {\n//             component(params, subcomponents) \n//           } catch (err) {\n//             // statements to handle any exceptions\n//             console.log(err);\n//             this.error = true;\n//           }\n\n          \n      \n//       },\n        \n//       checks: () => { return []; },  \n        \n        \n//       init: () => {\n  \n//       },\n      \n//       try: () => {\n  \n//       },\n\n// \t  get: () => { return component; },\n\n//       checks: () => {\n//           checks.map(() => {\n\n//           })\n\n//           if(subcomponents){\n//             //   subcomponents.map((component) => {\n//             //     component.init();\n//             //   })\n//           }\n\n        \n\n//       },\n\n//       // log: () => { \n//       //     console.log('123');\n\n          \n//       // //     console.log(this.display()) \n//       // },\n\n\n\n//       //get: () => {name:name, regEx:regEx, replace:replace(), isError:false},\n  \n//       //combine: () => {return {name:name, regEx:regEx, replace:replace()}},\n  \n//       // I want to have a better way to report errors, so each callback can report an issue, so we can track it better \n//       isError: () => { if(this.error){ return 'errror is here'; } }\n//     }\n//   }\n\n\n//   displayFactory.log = () => {\n//     // log: () => { \n//       console.log('123');\n//       console.log(this.display()) \n//   // },\n//   }\n  \n//   export default displayFactory;\n","import FruitFactory from \"./easyFactory\";\nimport displayFactoryTwo from \"./factoryTwo\";\n\nexport default {\n    FruitFactory,\n    displayFactoryTwo\n}"],"names":["FruitFactory","Factory","getClass","context","size","sugar","Error","displayFactoryTwo","error","partial","isError","setPartial","string","getPartial","display","create","settings","component","params","subcomponents","err","console","log"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,MAAM,CAAC,OAAO,EAAE;AACzB;AACA,IAAI,MAAM,eAAe,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClE,IAAI,eAAe,CAAC,KAAK,EAAE,CAAC;AAC5B;AACA,IAAI,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC/C;AACA,IAAI,OAAO,KAAK,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AAC5F,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,QAAQ,CAAC,OAAO,EAAE;AAC3B,IAAI,MAAM,IAAI,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACxG,GAAG;AACH,CAAC;AACD;AACA,IAAA,OAAc,GAAG,OAAO;;ACjCxB,MAAMA,YAAN,SAA2BC,OAA3B,CAAmC;EAalB,OAARC,QAAQ,CAACC,OAAD,EAAU;AAEvB,IAAA,IAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,WAAxB,IAAuC,OAAOD,OAAO,CAACE,KAAf,KAAyB,WAApE,EAAiF;AAC/E,MAAA,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,IAAIH,OAAO,CAACC,IAAR,IAAgB,CAApB,EAAuB;MAErB,OAAOD,OAAO,CAACE,KAAR,IAAiB,CAAjB,GAAqB,SAArB,GAAiC,WAAxC,CAAA;AACD,KAAA;;IAED,OAAOF,OAAO,CAACE,KAAR,IAAiB,CAAjB,GAAqB,SAArB,GAAiC,UAAxC,CAAA;AACD,GAAA;;AAzBgC;;ACbnC,MAAME,iBAAN,CAAwB;AAEpBC,EAAAA,KAAK,GAAG,KAAH,CAAA;AACLC,EAAAA,OAAO,GAAG,EAAH,CAAA;AAEPC,EAAAA,OAAO,GAAG,MAAM;AACZ,IAAA,OAAO,KAAKF,KAAZ,CAAA;GADG,CAAA;EAGPG,UAAU,GAAIC,MAAD,IAAY;IACvB,IAAKH,CAAAA,OAAL,GAAeG,MAAf,CAAA;GADQ,CAAA;AAIVC,EAAAA,UAAU,GAAG,MAAM;AACjB,IAAA,OAAO,KAAKJ,OAAZ,CAAA;GADQ,CAAA;AAIVK,EAAAA,OAAO,GAAG,MAAM;AACd,IAAA,IAAA,CAAKD,UAAL,EAAA,CAAA;GADK,CAAA;EAIPE,MAAM,GAAIC,QAAD,IAAc;IAKnB,MAAM;MAAEC,SAAF;MAAaC,MAAb;AAAqBC,MAAAA,aAAAA;AAArB,KAAA,GAAuCH,QAA7C,CAAA;AAKA,IAAA,IAAIP,OAAJ,CAAA;;IAOE,IAAI;AACFA,MAAAA,OAAO,GAAGQ,SAAS,CAACC,MAAD,EAASC,aAAT,CAAnB,CAAA;AAEA,MAAA,OAAOV,OAAP,CAAA;KAHF,CAOE,OAAOW,GAAP,EAAY;MAEZC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAA,CAAA;AAED,KAAA;GA5BD,CAAA;AApBc;;ACGxB,YAAe;EACXpB,YADW;AAEXO,EAAAA,iBAAAA;AAFW,CAAf;;;;"}